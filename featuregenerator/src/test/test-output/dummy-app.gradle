import amex.gradle.Libs
import amex.gradle.Versions
import amex.gradle.appdistribution.FirebaseConfiguration

apply plugin: 'amex.gradle.market-dependencies'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'amex.gradle.dagger'

if (!fastBuild) {
  apply plugin: 'com.google.firebase.crashlytics'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'amex.gradle.permissions-check'
  apply plugin: 'amex.gradle.app-distribution'
  apply plugin: 'amex.gradle.git-sha-generator'
}

logger.info("appIdSuffix = '${appIdSuffix}'")
logger.info("appNameSuffix = '${appNameSuffix}'")

android {

  signingConfigs {
    debug {
      storeFile file("debug_keystore.jks")
    }

    usDebug {
      initWith(signingConfigs.debug)
      storeFile file("us_debug.keystore")
    }
  }

  compileSdkVersion Versions.compileSdk

  defaultConfig {
    manifestPlaceholders << ["launcher_alias_activity": "com.americanexpress.android.intl.app.view.activity.SplashActivity",
                             "app_icon"               : "@mipmap/ic_launcher",
                             "app_icon_round"         : "@mipmap/ic_launcher_round"]

    minSdkVersion Versions.minSdk
    targetSdkVersion Versions.targetSdk
    versionCode 50000 + (fastBuild ? 100_000 : scmCommitCount)
    resValue 'integer', 'buildConfig_VERSION_CODE', "$versionCode"

    logger.info("versionCode: $versionCode")
    versionName Versions.versionName
    resValue 'string', 'buildConfig_VERSION_NAME', versionName
    testInstrumentationRunner 'com.americanexpress.android.test.AppAndroidJunitRunner'
    vectorDrawables.useSupportLibrary = false
    resValue 'bool', 'buildConfig_FAST_BUILD', "$forceNightMode"
    resValue 'bool', 'buildConfig_FAST_BUILD', "$fastBuild"
    resValue 'bool', 'buildConfig_FORCE_DISABLE_CERT_PINNING', "$forceDisableCertPinning"
    resValue 'string', 'buildConfig_GIT_SHA', "$scmRevision"
    resValue 'bool', 'buildConfig_QA_BUILD', "$qaBuild"
    resValue 'bool', 'buildConfig_HTTP_INSPECTOR_ENABLED', "$httpInspectorEnabled"
    resValue 'string', 'buildConfig_ENV', env
    if (drawerEnv != null) {
      resValue 'string', 'buildConfig_DRAWER_ENV', "$drawerEnv"
    } else {
      resValue 'string', 'buildConfig_DRAWER_ENV', "\"\""
    }
    // Enable Test Orchestrator's main feature, clearing app data between test executions
    if (useTestOrchestrator) {
      testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    ndk {
      // AmexPay only supports "armeabi-v7a" and "arm64-v8a" in release
      abiFilters "armeabi-v7a", "arm64-v8a"
    }
  }

  sourceSets {

    test {
      java {
        srcDirs += 'src/sharedTest/java'
      }
    }
    androidTest.java.srcDirs += 'src/sharedTest/java'
  }

  flavorDimensions "market", "mode"

  productFlavors {
    standard {
      dimension "mode"
      resValue 'string', 'buildConfig_FLAVOR_mode', name
    }

    if (experimentalMode) {
      experimental {
        dimension "mode"
        resValue 'string', 'buildConfig_FLAVOR_mode', name

        manifestPlaceholders << ["app_icon"      : "@mipmap/ic_launcher_experimental",
                                 "app_icon_round": "@mipmap/ic_launcher_experimental_round"]
        applicationIdSuffix ".experimental"

        // Change experimental versionName from `X.Y.Z` to `X.Y.<Z+1000+BUILD_NUMBER>`
        def versionDigits = Versions.versionName.tokenize(".")
        versionDigits[-1] = versionDigits[-1].toInteger() + 1000 + (System.getenv('BUILD_ID')?.toInteger() ?: 0)
        versionName = versionDigits.join(".")
      }
    }

    if (fastBuild && !aexpMarket.isEmpty()) {
      // for fastBuild, if we specify a specific market, then don't generate all the product flavors.
      // This will reduce time spent creating tasks during configure.
      aexpMarket.forEach {
        register(it) {
          marketFlavor(delegate)
          if (it == "us") {
            populateUsManifestPlaceholders(manifestPlaceholders)
          }

          if (it == "icc") {
            populateIccManifestPlaceholders(manifestPlaceholders)
          }
        }
      }
    } else {
      us {
        marketFlavor(delegate)
        populateUsManifestPlaceholders(manifestPlaceholders)
      }

      uk { marketFlavor(delegate) }
      au { marketFlavor(delegate) }
      ca { marketFlavor(delegate) }
      jp { marketFlavor(delegate) }
      mx { marketFlavor(delegate) }
      de { marketFlavor(delegate) }
      fr { marketFlavor(delegate) }
      ita { marketFlavor(delegate) }
      nl { marketFlavor(delegate) }
      se { marketFlavor(delegate) }
      ind { marketFlavor(delegate) }
      nz { marketFlavor(delegate) }
      es { marketFlavor(delegate) }
      hk { marketFlavor(delegate) }
      sg { marketFlavor(delegate) }
      at { marketFlavor(delegate) }
      fi { marketFlavor(delegate) }
      tw { marketFlavor(delegate) }
      no { marketFlavor(delegate) }
      be { marketFlavor(delegate) }
      icc {
        marketFlavor(delegate)
        populateIccManifestPlaceholders(manifestPlaceholders)
      }
    }
  }

  buildTypes {
    if (!fastBuild) {
      release {
        resValue 'string', 'buildConfig_BUILD_TYPE', name
        debuggable debuggableRelease
        shrinkResources false
        minifyEnabled true
        proguardFile getDefaultProguardFile('proguard-android.txt')
        file('proguard').listFiles().each { proguardFile it }
      }
    }
    debug {
      resValue 'string', 'buildConfig_BUILD_TYPE', name
      if (qaBuild || forceMinify) {
        minifyEnabled true
        proguardFile getDefaultProguardFile('proguard-android.txt')
        file('proguard').listFiles().each { proguardFile it }
      } else {
        minifyEnabled false
      }
      if (!fastBuild) {
        versionNameSuffix "-r$scmCommitCount$scmHasWorkingCopyModsLetter-${scmRevisionShort}"
      }
      ndk {
        // Amex Pay supports only arm in production, but we have both x86 and x86_64 for debug builds
        // abiFilters are additive, we still support "armeabi-v7a" and "arm64-v8a"
        abiFilters "x86", "x86_64"
      }
    }
  }

  variantFilter { variant ->
    // Removing the release builds from our fastBuild to reduce the clutter in `gradlew tasks` and in the variants selector
    if (fastBuild) {
      if (variant.buildType.name == "release") {
        setIgnore(true)
      }
    }

    // Remove "experimental" build types for markets that we don't support experimental builds for
    def experimentalMarkets = ["us", "uk", "sg"]
    def names = variant.flavors*.name
    if (names.contains("experimental") && names.disjoint(experimentalMarkets)) {
      setIgnore(true)
    }
  }

  android.applicationVariants.all { variant ->
    resValue 'string', 'buildConfig_FLAVOR', variant.flavorName

    variant.outputs.all {
      def marketName = variant.flavorName.replace("Standard", "").replace("Experimental", "")

      def config = resolveFirebaseConfiguration(variant, this)

      if (config == null) {
        logger.info("AppId (${variant.getMergedFlavor().applicationId}) Market (${marketName}) has no Firebase config.  Skipping.")
      } else {
        logger.info("AppId (${variant.getMergedFlavor().applicationId}) Market (${marketName}) ${config}")

        variant.resValue "string", "project_id", config.projectId
        variant.resValue "string", "google_api_key", config.apiKey
        variant.resValue "string", "google_app_id", config.firebaseAppId
      }
    }
  }

  if (!fastBuild) {
    android.applicationVariants.all { variant ->
      variant.outputs.all {
        def marketName = variant.flavorName.replace("Standard", "").replace("Experimental", "")

        if (variant.buildType.name == 'debug') {
          return
        }

        def buildVersion = variant.versionName
        // If we are running on Jenkins, append the build # for QA.
        def buildId = System.getenv('BUILD_ID')
        if (buildId) {
          buildVersion += "-j${buildId}"
        }
        def newApkName = "${project.name}-${baseName}-${buildVersion}-${env}-${marketName}${isNullOrEmpty(appIdSuffix) ? "" : "-" + appIdSuffix}.apk"
        outputFileName = newApkName
      }
    }
  }

  testOptions {
    if (useTestOrchestrator) {
      execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    unitTests.returnDefaultValues = true
    unitTests.includeAndroidResources = true
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.properties'
    exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.xml'
  }

  lintOptions {
    warningsAsErrors true
    checkDependencies true

    // The Jenkins lint plugin recommends this be false, so that Jenkins can
    // fail builds rather than having the android tools fail them.
    abortOnError !isCiBuild

    lintConfig file("lint.xml")

    // Note - this will have local machine paths in it if you regenerate.
    baseline file("lint-baseline.xml")

    // Disable lintVital checks since we already run a full lint analysis on CI
    checkReleaseBuilds false
  }
}

private static FirebaseConfiguration resolveFirebaseConfiguration(variant, extras) {
  return extras.firebaseConfigurations[variant.getMergedFlavor().applicationId]
}

private static populateUsManifestPlaceholders(placeholders) {
  placeholders << ["launcher_alias_activity": "com.americanexpress.android.acctsvcs.us.firstuse.StartupActivity"]
}

private static populateIccManifestPlaceholders(placeholders) {
  placeholders << ["app_icon"      : "@mipmap/ic_launcher_icc",
                   "app_icon_round": "@mipmap/ic_launcher_icc_round"]
}

dependencies {
  implementation project(':model')
  implementation project(':domain:core-model')
  implementation project(':domain:data-sources-android')
  implementation project(':dev-drawer-debug')
  implementation Libs.Busybee.android
  implementation project(':shared:android-utils')
  implementation project(':shared:android-ui')
  implementation project(':shared:crashreporter:api')
  implementation project(':shared:common-error-handler')
  implementation project(':shared:cross-border')
  implementation project(':shared:ndl-components')
  implementation project(':shared:ndl-model')
  implementation project(':shared:ndl-faq')
  implementation project(':shared:places-client')
  implementation project(':shared:ndl-maps')
  implementation project(':shared:android-resources')
  implementation project(':shared:external-actions')
  implementation project(':shared:router')
  implementation project(':shared:stub-responses')
  implementation project(':feature:ask-amex:wiremock-stubs')
  implementation project(':dagger-annotations')
  implementation project(':shared:storage-utils')
  implementation project(':shared:build-config')
  implementation project(':shared:money-utils')
  implementation project(':shared:optimizely')
  implementation project(':shared:rxworkflow-components-android')
  implementation project(':shared:sso-customtab')
  implementation project(':shared:pzn-tracking-helper')
  implementation project(':feature:main-tab')
  implementation project(':feature:biometric-auth')
  implementation project(':feature:auth-n')
  implementation project(':feature:benefits')
  implementation project(':feature:biometrics-registration:ui')
  implementation project(':feature:check-spending-power')
  implementation project(':feature:deeplinking')
  implementation project(':feature:digital-charge-verification')
  implementation project(':feature:disputes')
  implementation project(':feature:paperless')
  implementation project(':feature:credit-line-increase')
  implementation project(':feature:error-retry')
  implementation project(':feature:feature-intros')
  implementation project(':feature:language-selection')
  implementation project(':feature:login')
  implementation project(':feature:login:login-networking')
  implementation project(':feature:login:session-manager')
  implementation project(':feature:lounge-finder')
  implementation project(':feature:messaging:models')
  implementation project(':feature:financials')
  implementation project(':feature:oauth-grant')
  implementation project(':feature:offers')
  implementation project(':feature:pay-over-time')
  implementation project(':feature:pay-over-time:pot-network')
  implementation project(':feature:payments:payments-networking')
  implementation project(':feature:pay-over-time-v2:ui')
  implementation project(':feature:payments:payments-ui')
  implementation project(':feature:planitV2:planit-ui')
  implementation project(':feature:planitV2:planit-networking')
  implementation project(':feature:payments-options')
  implementation project(':feature:pin-management')
  implementation project(':feature:pin-management:choose-pin')
  implementation project(':feature:pin-management:choose-pin-refactor')
  implementation project(':feature:pin-management:pin-components')
  implementation project(':feature:pin-management:pin-explanation')
  implementation project(':feature:pin-management:pin-explanation-refactor')
  implementation project(':feature:pin-management:pin-management-client')
  implementation project(':feature:pin-management:pin-model')
  implementation project(':feature:plan-it-autopay')
  implementation project(':feature:profile')
  implementation project(':feature:push-notifications')
  implementation project(':feature:refer-a-friend')
  implementation project(':feature:refer-a-friend-v2')
  implementation project(':feature:refer-a-friend-v2:refer-a-friend-networking')
  implementation project(':feature:transaction-details')
  implementation project(':feature:transaction-search')
  implementation project(':feature:card-activation')
  implementation project(':feature:card-switcher')
  implementation project(':feature:card-freeze')
  implementation project(':feature:statements')
  implementation project(':feature:feature-intros')
  implementation project(':feature:pay-your-way')
  implementation project(':feature:dining')
  implementation project(':feature:member-get-member')
  implementation project(':feature:direct-debit')
  implementation project(':feature:safekey')
  implementation project(':feature:servicing')
  implementation project(':feature:default-card')
  implementation project(':feature:income-capture')
  implementation project(':feature:peer2peer:networking')
  implementation project(':feature:peer2peer:send-and-split:ui')
  implementation project(':feature:timeline')
  implementation project(':feature:one-time-passcode:otp-ui')
  implementation project(':feature:one-time-passcode:otp-networking')
  implementation project(':feature:user-registration:userreg-ui')
  implementation project(':feature:user-registration:userreg-networking')
  implementation project(':feature:supplementary-spend:supplementary-spend-view')
  implementation project(':shared:timeline-client')
  implementation project(':slf4j-android-amex')
  implementation project(':location-android')
  implementation project(':permissions')
  implementation project(':event')
  implementation project(':amex-lintlib')
  implementation project(':missile')
  implementation project(':mcp-headers:mcp-headers-android')
  implementation project(':rxcache')
  implementation project(':java-utilities')
  implementation project(':feature:membership')
  implementation project(':feature:membership:membership-networking')
  implementation project(':feature:edit-email')
  implementation project(':feature:help')
  implementation project(':shared:moshi')
  implementation project(':moshi-dagger')
  implementation project(':shared:account-summary-networking')
  implementation project(':shared:analytics:onestream')
  implementation project(':shared:recyclerview')
  implementation project(':shared:retrofit')
  implementation project(':shared:work-manager')
  implementation project(':shared:ndl-faq')
  implementation project(':shared:sso-webview')
  implementation project(':feature:edit-phone')
  implementation project(':shared:experimental-utils')
  implementation project(':monitoring:performance')
  implementation project(':monitoring:spans-android-extensions')
  implementation project(':feature:use-points')
  implementation project(':shared:kotlin-utils')
  implementation project(':feature:card-activation-refactor:car-networking')
  implementation project(':feature:card-activation-refactor:car-ui')
  implementation project(':feature:edit-name')

  if (experimentalMode) {
    experimentalImplementation project(':shared:metrics-feedback')
    experimentalImplementation project(':partnerships:mta')
    experimentalImplementation project(':partnerships:uber')
    experimentalImplementation project(':partnerships:acquisition')
    experimentalImplementation project(':partnerships:lounge-access')
    experimentalImplementation(Libs.lottie)
    experimentalImplementation project(':feature:search')
  }

  implementation project(':feature:amex-pay')

  implementation project(":rx-workflow:rxworkflow-all")

  implementation enforcedPlatform(Libs.Firebase.bom)
  implementation Libs.Firebase.messaging
  implementation Libs.PlayServices.maps
  implementation Libs.PlayServices.location
  implementation Libs.PlayServices.safetyNet
  implementation Libs.Support.transition
  implementation Libs.Support.legacyPreference_v14
  implementation Libs.Support.appCompat
  implementation Libs.Support.lifecycle
  implementation Libs.Support.fragment
  implementation Libs.Support.design
  implementation Libs.Support.recyclerview
  implementation Libs.Support.customTabs
  implementation Libs.Support.constraintLayout
  implementation Libs.Support.cardview
  implementation Libs.Support.coreKtx
  implementation Libs.cardIo
  implementation Libs.installReferrer

  implementation Libs.RxJava.v3
  implementation Libs.RxJava.androidV3

  implementation Libs.RxJava.bindingV4
  implementation Libs.Retrofit.rxV1Adapter
  implementation Libs.Retrofit.gsonConverter
  implementation enforcedPlatform(Libs.OkHttp.bom)
  implementation Libs.OkHttp.core
  implementation Libs.OkHttp.loggingInterceptor
  implementation Libs.Retrofit.core
  implementation Libs.Retrofit.rxV3Adapter
  implementation Libs.Retrofit.moshiConverter
  implementation Libs.places
  implementation(Libs.picasso) {
    exclude group: 'com.android.support', module: 'exifinterface'
  }
  implementation Libs.timber
  implementation Libs.guavaAndroid
  implementation Libs.gson
  implementation Libs.adobeAnalytics
  implementation Libs.Kotlin.stdlib

  implementation Libs.Arrow.core
  implementation Libs.Arrow.data
  implementation Libs.Arrow.syntax

  implementation Libs.OneStream.android

  debugImplementation Libs.leakCanary

  implementation Libs.AutoDispose.core
  implementation Libs.AutoDispose.archcomponents
  implementation Libs.AutoDispose.android
  testImplementation Libs.AutoDispose.archcomponentsTest
  implementation Libs.AutoDispose.core
  implementation Libs.AutoDispose.android
  implementation Libs.AutoDispose.archcomponents
  testImplementation Libs.AutoDispose.archcomponentsTest

  implementation Libs.OkHttp.urlconnection
  implementation project(':shared:dagger-support')
  implementation Libs.Dagger.android
  implementation Libs.Dagger.androidSupport
  debugImplementation Libs.gander
  testImplementation project(':test-support')
  testImplementation project(':test-support:test-moshi')
  testImplementation project(':test-data-objects')
  testImplementation Libs.junit
  testImplementation Libs.Mockito.inline
  testImplementation Libs.Mockito.kotlin
  testImplementation Libs.opengl
  testImplementation Libs.Kotlin.testJunit
  testImplementation Libs.AndroidXTest.testExt
  testImplementation project(':shared:test-rules')
  testImplementation project(':shared:view-test-activity')

  debugImplementation project(':feature:debug-selector')
  debugImplementation project(':shared:view-test-activity')

  testDebugImplementation project(':rx-workflow:rxworkflow-test')

  androidTestImplementation project(':feature:paperless:paperless-test-support')
  androidTestImplementation project(':shared:view-test-activity')
  androidTestImplementation project(':shared:test-runner')
  androidTestImplementation project(':shared:test-rules')
  androidTestImplementation project(':shared:timeline-client:timeline-actions-test-support')
  androidTestImplementation project(':atsl-extras')
  androidTestImplementation project(':test-support')
  androidTestImplementation(project(':test-support:test-data'))
  androidTestImplementation project(':test-support:initialization-test-support')
  androidTestImplementation project(':test-support:test-moshi')
  androidTestImplementation project(':wiremock-support')
  androidTestImplementation project(':feature:ask-amex:wiremock-flows')
  androidTestImplementation project(':feature:pay-over-time:pot-test-support')
  androidTestImplementation project(':feature:lounge-finder:lounge-finder-test-data')
  androidTestImplementation(project(':feature:lounge-finder:lounge-finder-test-support')) {
    exclude group: 'org.mockito'
  }
  androidTestImplementation(Libs.wiremock) {
    //Allows us to use the Android version of Apache httpclient instead
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'

    //Resolves the Duplicate Class Exception
    //duplicate entry: org/objectweb/asm/AnnotationVisitor.class
    exclude group: 'asm', module: 'asm'

    //Fixes Warning conflict with Android's version of org.json
    //org.json:json:20090211 is ignored for debugAndroidTest as it may be conflicting with the internal version provided by Android.
    exclude group: 'org.json', module: 'json'

    //Version conflict with our app's slf4j version
    exclude group: 'org.slf4j', module: 'slf4j-api'

    //Version conflict with our app's slf4j version
    exclude group: 'com.google.guava', module: 'guava'

    exclude group: 'com.jayway.jsonpath', module: 'json-path'
  }

  androidTestImplementation project(':feature:offers')
  androidTestImplementation project(':fake-permissions')
  androidTestImplementation(project(':feature:lounge-finder')) {
    exclude group: 'com.google.code.gson'
  }
  androidTestImplementation project(':espresso-sugar')
  androidTestImplementation project(':espresso-sugar-extended')
  androidTestImplementation project(':test-data-objects')
  androidTestImplementation project(':feature:feature-intros')
  androidTestImplementation project(':feature:peer2peer:send-and-split:robots')
  androidTestImplementation project(':feature:peer2peer:shared-test-data')
  androidTestImplementation project(':feature:credit-line-increase:robots')
  androidTestImplementation project(':feature:one-time-passcode:otp-robots')
  androidTestImplementation project(':feature:biometrics-registration:robots')
  androidTestImplementation Libs.assertk
  testImplementation Libs.assertk
  androidTestImplementation Libs.Mockito.dexmaker
  androidTestImplementation Libs.Espresso.googleAccessibilityFramework
  androidTestImplementation Libs.Espresso.web
  androidTestImplementation Libs.Espresso.intents
  androidTestImplementation Libs.Espresso.core, {
    exclude group: 'com.google.code.findbugs'
  }
  androidTestImplementation Libs.Espresso.contrib
  androidTestImplementation Libs.jsonPath
  androidTestImplementation Libs.Mockito.android
  androidTestImplementation Libs.Mockito.kotlin
  androidTestImplementation Libs.AndroidXTest.core
  androidTestImplementation Libs.AndroidXTest.coreKtx
  androidTestImplementation Libs.places
  androidTestImplementation Libs.timesSquare
  androidTestImplementation project(':feature:profile:profile-test-support')
  androidTestImplementation project(':feature:edit-phone:edit-phone-test-support')
  androidTestImplementation project(':feature:income-capture:income-capture-test-support')
  androidTestImplementation project(':feature:card-activation:card-activation-test-support')
  androidTestImplementation project(':feature:check-spending-power:csp-test-support')
  androidTestImplementation project(':feature:disputes:disputes-test-support')
  androidTestImplementation project(':feature:edit-email:edit-email-test-support')
  androidTestImplementation project(':feature:membership:membership-test-support')
  androidTestImplementation project(':feature:transaction-details:transactions-test-support')
  androidTestImplementation project(':feature:transaction-search:transaction-search-test-support')
  androidTestImplementation project(':feature:supplementary-spend:supplementary-spend-test-data')
  androidTestImplementation project(':feature:help:help-test-support')
  androidTestImplementation project(':rx-workflow:rxworkflow-test')
  androidTestImplementation project(':feature:offers:offers-test-support')
  androidTestImplementation project(':feature:payments:payments-test-data')
  androidTestImplementation project(':feature:payments:payments-robots')
  androidTestImplementation project(':feature:statements:statements-test-support')
  androidTestImplementation project(':feature:planitV2:planit-shared-test-data')
  androidTestImplementation(project(':feature:planitV2:planit-robots'))
  androidTestImplementation project(':feature:timeline:timeline-test-support')
  androidTestImplementation project(':feature:default-card:default-card-test-support')
  androidTestImplementation project(':feature:refer-a-friend-v2:raf-v2-test-support')
  androidTestImplementation project(':feature:benefits:benefits-test-support')
  androidTestImplementation project(':test-support:dhall-scenario')
  androidTestImplementation project(':test-support:login-summary-test-support')
  androidTestImplementation project(':test-support:logoff-test-support')
  androidTestImplementation project(':test-support:summary-test-support')
  androidTestImplementation project(':feature:edit-name:edit-name-test-support')
  androidTestImplementation project(':feature:card-freeze:card-freeze-test-support')

  if (useTestOrchestrator) {
    androidTestUtil Libs.AndroidXTest.orchestrator
  }
}

static def isNullOrEmpty(string) {
  return string == null || string == ""
}

def marketFlavor(flavor) {
  def flavorName = flavor.name
  // This closure corresponds to the content of a flavor configuration
  def config = {
    dimension "market"
    def marketInfo = marketInfos[flavorName]
    // if we are not overriding the package name, use the flavor name
    def marketPackage = marketInfo.packageName ?: flavorName
    if (isNullOrEmpty(appIdSuffix)) {
      applicationId "com.americanexpress.android.acctsvcs.$marketPackage"
    } else {
      applicationId "com.americanexpress.android.acctsvcs.$marketPackage.${appIdSuffix}"
    }

    manifestPlaceholders << ["dev_settings_name": "Settings ${flavorName.toUpperCase()}"]

    resValue 'string', 'buildConfig_market', "$marketPackage"
    resValue 'string', 'buildConfig_base', "com.americanexpress.android.acctsvcs.${marketPackage}.m1."

    resValue "string", "app_name", "\"${marketInfo.appName}${appNameSuffix}\""

    if (marketInfo.supportsAmexPay && newtonBuild) {
      // This allows us to force the right product flavor in the amex-pay module
      // this could be any value that is not a real permission, we don't want to remove any permissions
      manifestPlaceholders << ["permission_to_be_removed": "DONT_REMOVE_READ_PHONE_STATE"]
    } else {
      // if it is NOT an AmexPay build, we need to remove the READ_PHONE_STATE added by react native
      manifestPlaceholders << ["permission_to_be_removed": "android.permission.READ_PHONE_STATE"]

      // AmexPay only supports "armeabi-v7a" and "arm64-v8a"
      // For every other market, we can add the x86 and x86_64 support since ReactNative supports these.
      ndk {
        abiFilters "x86", "x86_64"
      }
    }

    if (signReleaseBuild) {
      // sign with debug key, just for QA and dev purposes
      if (flavorName == "us") {
        signingConfig android.signingConfigs.usDebug
      } else {
        signingConfig android.signingConfigs.debug
      }
    }
  }

  config.delegate = flavor
  config.resolveStrategy = Closure.DELEGATE_FIRST
  config()
}

if (!fastBuild) {
  // The OWASP dependency-check plugin
  dependencyCheck {
    // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
    suppressionFiles = ['app/dependency-check-suppress.xml']
    failBuildOnCVSS 1 // we want to fail on any vulnerabilities found
    skipConfigurations = ['lintClassPath']
  }
}

/**
 * Simple task that wraps the get-initialization script in order to pass the correct app version*/
def fetchInitialization = tasks.register("fetchInitialization", Exec) {
  ignoreExitValue true
  workingDir project.rootDir.absolutePath

  doFirst {
    def market = System.getProperty('aexpMarket')

    def commands = ['python3',
                    './build-tools/get-initialization.py',
                    '--market',
                    market,
                    '--destination',
                    './app/src/main/assets/init',
                    '--client-type',
                    'Android',
                    '--app-version',
                    Versions.versionName]

    // check if running on jenkins.
    if (System.getenv().get("BUILD_ID") != null) {
      commands.add('--verbose')
    }

    if (market == null) {
      throw new GradleException("[aexpMarket] is missing. Please provide it via -DaexpMarket=MARKET")
    }

    commandLine(commands)
  }

  doLast {
    if (execResult.getExitValue() != 0) {
      throw new GradleException("get-initialization.py failed")
    }
  }
}

fetchInitialization.configure {
  dependsOn preBuild
}
